import randomfrom src.data_loader import DataLoaderclass Npc:    def __init__(self):        self.generated_value = {}        self._orientation = None        self._plot_hook = None        self._character = None        self._mouth = None        self._lips = None        self._teeth = None        self._head = None        self._nose = None        self._front = None        self._haircut = None        self._sex = None        self._skin_tone = None        self._weight = None        self._height = None        self._sentence = None    def _get_random_data(self, key, data_loader):        weighs = []        data_value = []        data = data_loader.load(key)        for d in data:            weighs.append(d['weight'])            dependencies = []            if "dependencies" in d:                for dependency in d["dependencies"]:                    dependencies.append(self._get_random_data(dependency, data_loader))                data_value.append(d['value'].format(*dependencies))            else:                data_value.append(d['value'])        return random.choices(data_value, weighs, k=1)[0]    @staticmethod    def create_random(data_loader: DataLoader):        npc = Npc()        npc._set_sentence(data_loader.load("sentence"))        npc._load_dependencies(data_loader)        return npc    def _load_dependencies(self, data_loader):        for sentence in self._sentence.keys():            for key in self._sentence[sentence]['dependencies']:                self.generated_value[key] = self._get_random_data(key, data_loader)    def _set_sentence(self, sentence):        self._sentence = sentence    def get_physical_description(self):        general_sentence = self._sentence['description']['value'] \            .format(**self.generated_value)        print(general_sentence)        hair_sentence = self._sentence['hair']['value'].format(**self.generated_value)        head_sentence = self._sentence['head']['value'] \            .format(**self.generated_value)        eyes_sentence = "Elle a les yeux r√©volvers"        mouth_sentence = self._sentence['mouth']['value'] \            .format(**self.generated_value)        return f"{general_sentence}\n{hair_sentence}\n" \               f"{head_sentence}\n{eyes_sentence}\n{mouth_sentence}"    def get_character_description(self):        return self._character    def get_plot_hook(self):        return self._plot_hook    def get_relationships(self):        return self._orientation