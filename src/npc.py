import randomfrom src.data_loader import DataLoaderclass Npc:    def __init__(self):        self._orientation = None        self._plot_hook = None        self._character = None        self._mouth = None        self._lips = None        self._teeth = None        self._head = None        self._nose = None        self._front = None        self._haircut = None        self._sex = None        self._skin_tone = None        self._weight = None        self._height = None        self._sentence = None    def _get_random_data(self, data):        weighs = []        data_value = []        for d in data:            weighs.append(d['weight'])            dependencies = []            if "dependencies" in d:                for dependency in d["dependencies"]:                    data_dependency = getattr(self, f"_{dependency}")                    dependencies.append(self._get_random_data(data_dependency))                data_value.append(d['value'].format(*dependencies))            else:                data_value.append(d['value'])        return random.choices(data_value, weighs, k=1)[0]    @staticmethod    def create_random(data_loader: DataLoader):        npc = Npc()        npc._load_dependencies(data_loader)        npc._set_attributes(data_loader)        npc._set_sentence(data_loader.load("sentence"))        return npc    def _load_dependencies(self, data_loader):        for d in ["relationship"]:            data = data_loader.load(d)            setattr(self, f"_{d}", data)    def _set_attributes(self, data_loader):        for s in ["sex", "weight", "height", "skin_tone", "head", "front",                  "nose", "mouth", "teeth", "lips", "haircut", "character",                  "plot_hook", "orientation"]:            data = data_loader.load(s)            value = self._get_random_data(data)            setattr(self, f"_{s}", value)    def _set_sentence(self, sentence):        self._sentence = sentence    def get_physical_description(self):        general_sentence = self._sentence['description'][self._sex] \            .format(self._height, self._weight, self._skin_tone)        hair_sentence = self._sentence['hair'][self._sex].format(self._haircut)        head_sentence = self._sentence['head'][self._sex] \            .format(self._head, self._front, self._nose)        eyes_sentence = "Elle a les yeux r√©volvers"        mouth_sentence = self._sentence['mouth'][self._sex] \            .format(self._mouth, self._lips, self._teeth)        return f"{general_sentence}\n{hair_sentence}\n" \               f"{head_sentence}\n{eyes_sentence}\n{mouth_sentence}"    def get_character_description(self):        return self._character    def get_plot_hook(self):        return self._plot_hook    def get_relationships(self):        return self._orientation